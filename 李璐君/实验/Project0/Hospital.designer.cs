#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project0
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hospital")]
	public partial class HospitalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertDepartments(Departments instance);
    partial void UpdateDepartments(Departments instance);
    partial void DeleteDepartments(Departments instance);
    partial void InsertDoctors(Doctors instance);
    partial void UpdateDoctors(Doctors instance);
    partial void DeleteDoctors(Doctors instance);
    partial void InsertPatient_Admissions(Patient_Admissions instance);
    partial void UpdatePatient_Admissions(Patient_Admissions instance);
    partial void DeletePatient_Admissions(Patient_Admissions instance);
    partial void InsertPatients(Patients instance);
    partial void UpdatePatients(Patients instance);
    partial void DeletePatients(Patients instance);
    partial void InsertStaffs(Staffs instance);
    partial void UpdateStaffs(Staffs instance);
    partial void DeleteStaffs(Staffs instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public HospitalDataContext() : 
				base(global::Project0.Properties.Settings.Default.HospitalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Departments> Departments
		{
			get
			{
				return this.GetTable<Departments>();
			}
		}
		
		public System.Data.Linq.Table<Doctors> Doctors
		{
			get
			{
				return this.GetTable<Doctors>();
			}
		}
		
		public System.Data.Linq.Table<Patient_Admissions> Patient_Admissions
		{
			get
			{
				return this.GetTable<Patient_Admissions>();
			}
		}
		
		public System.Data.Linq.Table<Patients> Patients
		{
			get
			{
				return this.GetTable<Patients>();
			}
		}
		
		public System.Data.Linq.Table<Staffs> Staffs
		{
			get
			{
				return this.GetTable<Staffs>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Departments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Dept_id;
		
		private string _Dept_name;
		
		private EntitySet<Doctors> _Doctors;
		
		private EntitySet<Patient_Admissions> _Patient_Admissions;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDept_idChanging(int value);
    partial void OnDept_idChanged();
    partial void OnDept_nameChanging(string value);
    partial void OnDept_nameChanged();
    #endregion
		
		public Departments()
		{
			this._Doctors = new EntitySet<Doctors>(new Action<Doctors>(this.attach_Doctors), new Action<Doctors>(this.detach_Doctors));
			this._Patient_Admissions = new EntitySet<Patient_Admissions>(new Action<Patient_Admissions>(this.attach_Patient_Admissions), new Action<Patient_Admissions>(this.detach_Patient_Admissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Dept_id
		{
			get
			{
				return this._Dept_id;
			}
			set
			{
				if ((this._Dept_id != value))
				{
					this.OnDept_idChanging(value);
					this.SendPropertyChanging();
					this._Dept_id = value;
					this.SendPropertyChanged("Dept_id");
					this.OnDept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Dept_name
		{
			get
			{
				return this._Dept_name;
			}
			set
			{
				if ((this._Dept_name != value))
				{
					this.OnDept_nameChanging(value);
					this.SendPropertyChanging();
					this._Dept_name = value;
					this.SendPropertyChanged("Dept_name");
					this.OnDept_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departments_Doctors", Storage="_Doctors", ThisKey="Dept_id", OtherKey="Dept_id")]
		public EntitySet<Doctors> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departments_Patient_Admissions", Storage="_Patient_Admissions", ThisKey="Dept_id", OtherKey="Dept_id")]
		public EntitySet<Patient_Admissions> Patient_Admissions
		{
			get
			{
				return this._Patient_Admissions;
			}
			set
			{
				this._Patient_Admissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctors entity)
		{
			this.SendPropertyChanging();
			entity.Departments = this;
		}
		
		private void detach_Doctors(Doctors entity)
		{
			this.SendPropertyChanging();
			entity.Departments = null;
		}
		
		private void attach_Patient_Admissions(Patient_Admissions entity)
		{
			this.SendPropertyChanging();
			entity.Departments = this;
		}
		
		private void detach_Patient_Admissions(Patient_Admissions entity)
		{
			this.SendPropertyChanging();
			entity.Departments = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctors")]
	public partial class Doctors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Doctor_id;
		
		private string _Doctor_name;
		
		private string _Doctor_surname;
		
		private int _Dept_id;
		
		private string _Phone;
		
		private int _User_id;
		
		private string _Address;
		
		private EntitySet<Patient_Admissions> _Patient_Admissions;
		
		private EntityRef<Departments> _Departments;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctor_idChanging(int value);
    partial void OnDoctor_idChanged();
    partial void OnDoctor_nameChanging(string value);
    partial void OnDoctor_nameChanged();
    partial void OnDoctor_surnameChanging(string value);
    partial void OnDoctor_surnameChanged();
    partial void OnDept_idChanging(int value);
    partial void OnDept_idChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Doctors()
		{
			this._Patient_Admissions = new EntitySet<Patient_Admissions>(new Action<Patient_Admissions>(this.attach_Patient_Admissions), new Action<Patient_Admissions>(this.detach_Patient_Admissions));
			this._Departments = default(EntityRef<Departments>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Doctor_id
		{
			get
			{
				return this._Doctor_id;
			}
			set
			{
				if ((this._Doctor_id != value))
				{
					this.OnDoctor_idChanging(value);
					this.SendPropertyChanging();
					this._Doctor_id = value;
					this.SendPropertyChanged("Doctor_id");
					this.OnDoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Doctor_name
		{
			get
			{
				return this._Doctor_name;
			}
			set
			{
				if ((this._Doctor_name != value))
				{
					this.OnDoctor_nameChanging(value);
					this.SendPropertyChanging();
					this._Doctor_name = value;
					this.SendPropertyChanged("Doctor_name");
					this.OnDoctor_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Doctor_surname
		{
			get
			{
				return this._Doctor_surname;
			}
			set
			{
				if ((this._Doctor_surname != value))
				{
					this.OnDoctor_surnameChanging(value);
					this.SendPropertyChanging();
					this._Doctor_surname = value;
					this.SendPropertyChanged("Doctor_surname");
					this.OnDoctor_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_id", DbType="Int NOT NULL")]
		public int Dept_id
		{
			get
			{
				return this._Dept_id;
			}
			set
			{
				if ((this._Dept_id != value))
				{
					if (this._Departments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDept_idChanging(value);
					this.SendPropertyChanging();
					this._Dept_id = value;
					this.SendPropertyChanged("Dept_id");
					this.OnDept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL")]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Patient_Admissions", Storage="_Patient_Admissions", ThisKey="Doctor_id", OtherKey="Doctor_id")]
		public EntitySet<Patient_Admissions> Patient_Admissions
		{
			get
			{
				return this._Patient_Admissions;
			}
			set
			{
				this._Patient_Admissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departments_Doctors", Storage="_Departments", ThisKey="Dept_id", OtherKey="Dept_id", IsForeignKey=true)]
		public Departments Departments
		{
			get
			{
				return this._Departments.Entity;
			}
			set
			{
				Departments previousValue = this._Departments.Entity;
				if (((previousValue != value) 
							|| (this._Departments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Departments.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._Departments.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._Dept_id = value.Dept_id;
					}
					else
					{
						this._Dept_id = default(int);
					}
					this.SendPropertyChanged("Departments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Doctors", Storage="_Users", ThisKey="User_id", OtherKey="User_id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._User_id = value.User_id;
					}
					else
					{
						this._User_id = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patient_Admissions(Patient_Admissions entity)
		{
			this.SendPropertyChanging();
			entity.Doctors = this;
		}
		
		private void detach_Patient_Admissions(Patient_Admissions entity)
		{
			this.SendPropertyChanging();
			entity.Doctors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient_Admissions")]
	public partial class Patient_Admissions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Patient_ad_id;
		
		private int _Patient_id;
		
		private int _Dept_id;
		
		private int _Doctor_id;
		
		private System.DateTime _Date_in;
		
		private string _Complaint;
		
		private string _Diagnosis;
		
		private string _Prescription;
		
		private System.Nullable<bool> _Blood_analysis;
		
		private System.Nullable<bool> _Urianalysis;
		
		private System.Nullable<bool> _Xray;
		
		private EntityRef<Departments> _Departments;
		
		private EntityRef<Doctors> _Doctors;
		
		private EntityRef<Patients> _Patients;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatient_ad_idChanging(int value);
    partial void OnPatient_ad_idChanged();
    partial void OnPatient_idChanging(int value);
    partial void OnPatient_idChanged();
    partial void OnDept_idChanging(int value);
    partial void OnDept_idChanged();
    partial void OnDoctor_idChanging(int value);
    partial void OnDoctor_idChanged();
    partial void OnDate_inChanging(System.DateTime value);
    partial void OnDate_inChanged();
    partial void OnComplaintChanging(string value);
    partial void OnComplaintChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnPrescriptionChanging(string value);
    partial void OnPrescriptionChanged();
    partial void OnBlood_analysisChanging(System.Nullable<bool> value);
    partial void OnBlood_analysisChanged();
    partial void OnUrianalysisChanging(System.Nullable<bool> value);
    partial void OnUrianalysisChanged();
    partial void OnXrayChanging(System.Nullable<bool> value);
    partial void OnXrayChanged();
    #endregion
		
		public Patient_Admissions()
		{
			this._Departments = default(EntityRef<Departments>);
			this._Doctors = default(EntityRef<Doctors>);
			this._Patients = default(EntityRef<Patients>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ad_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Patient_ad_id
		{
			get
			{
				return this._Patient_ad_id;
			}
			set
			{
				if ((this._Patient_ad_id != value))
				{
					this.OnPatient_ad_idChanging(value);
					this.SendPropertyChanging();
					this._Patient_ad_id = value;
					this.SendPropertyChanged("Patient_ad_id");
					this.OnPatient_ad_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_id", DbType="Int NOT NULL")]
		public int Patient_id
		{
			get
			{
				return this._Patient_id;
			}
			set
			{
				if ((this._Patient_id != value))
				{
					if (this._Patients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_idChanging(value);
					this.SendPropertyChanging();
					this._Patient_id = value;
					this.SendPropertyChanged("Patient_id");
					this.OnPatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_id", DbType="Int NOT NULL")]
		public int Dept_id
		{
			get
			{
				return this._Dept_id;
			}
			set
			{
				if ((this._Dept_id != value))
				{
					if (this._Departments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDept_idChanging(value);
					this.SendPropertyChanging();
					this._Dept_id = value;
					this.SendPropertyChanged("Dept_id");
					this.OnDept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_id", DbType="Int NOT NULL")]
		public int Doctor_id
		{
			get
			{
				return this._Doctor_id;
			}
			set
			{
				if ((this._Doctor_id != value))
				{
					if (this._Doctors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctor_idChanging(value);
					this.SendPropertyChanging();
					this._Doctor_id = value;
					this.SendPropertyChanged("Doctor_id");
					this.OnDoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_in", DbType="Date NOT NULL")]
		public System.DateTime Date_in
		{
			get
			{
				return this._Date_in;
			}
			set
			{
				if ((this._Date_in != value))
				{
					this.OnDate_inChanging(value);
					this.SendPropertyChanging();
					this._Date_in = value;
					this.SendPropertyChanged("Date_in");
					this.OnDate_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complaint", DbType="NVarChar(250)")]
		public string Complaint
		{
			get
			{
				return this._Complaint;
			}
			set
			{
				if ((this._Complaint != value))
				{
					this.OnComplaintChanging(value);
					this.SendPropertyChanging();
					this._Complaint = value;
					this.SendPropertyChanged("Complaint");
					this.OnComplaintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnosis", DbType="NVarChar(250)")]
		public string Diagnosis
		{
			get
			{
				return this._Diagnosis;
			}
			set
			{
				if ((this._Diagnosis != value))
				{
					this.OnDiagnosisChanging(value);
					this.SendPropertyChanging();
					this._Diagnosis = value;
					this.SendPropertyChanged("Diagnosis");
					this.OnDiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prescription", DbType="NVarChar(250)")]
		public string Prescription
		{
			get
			{
				return this._Prescription;
			}
			set
			{
				if ((this._Prescription != value))
				{
					this.OnPrescriptionChanging(value);
					this.SendPropertyChanging();
					this._Prescription = value;
					this.SendPropertyChanged("Prescription");
					this.OnPrescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blood_analysis", DbType="Bit")]
		public System.Nullable<bool> Blood_analysis
		{
			get
			{
				return this._Blood_analysis;
			}
			set
			{
				if ((this._Blood_analysis != value))
				{
					this.OnBlood_analysisChanging(value);
					this.SendPropertyChanging();
					this._Blood_analysis = value;
					this.SendPropertyChanged("Blood_analysis");
					this.OnBlood_analysisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Urianalysis", DbType="Bit")]
		public System.Nullable<bool> Urianalysis
		{
			get
			{
				return this._Urianalysis;
			}
			set
			{
				if ((this._Urianalysis != value))
				{
					this.OnUrianalysisChanging(value);
					this.SendPropertyChanging();
					this._Urianalysis = value;
					this.SendPropertyChanged("Urianalysis");
					this.OnUrianalysisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Xray", DbType="Bit")]
		public System.Nullable<bool> Xray
		{
			get
			{
				return this._Xray;
			}
			set
			{
				if ((this._Xray != value))
				{
					this.OnXrayChanging(value);
					this.SendPropertyChanging();
					this._Xray = value;
					this.SendPropertyChanged("Xray");
					this.OnXrayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departments_Patient_Admissions", Storage="_Departments", ThisKey="Dept_id", OtherKey="Dept_id", IsForeignKey=true)]
		public Departments Departments
		{
			get
			{
				return this._Departments.Entity;
			}
			set
			{
				Departments previousValue = this._Departments.Entity;
				if (((previousValue != value) 
							|| (this._Departments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Departments.Entity = null;
						previousValue.Patient_Admissions.Remove(this);
					}
					this._Departments.Entity = value;
					if ((value != null))
					{
						value.Patient_Admissions.Add(this);
						this._Dept_id = value.Dept_id;
					}
					else
					{
						this._Dept_id = default(int);
					}
					this.SendPropertyChanged("Departments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Patient_Admissions", Storage="_Doctors", ThisKey="Doctor_id", OtherKey="Doctor_id", IsForeignKey=true)]
		public Doctors Doctors
		{
			get
			{
				return this._Doctors.Entity;
			}
			set
			{
				Doctors previousValue = this._Doctors.Entity;
				if (((previousValue != value) 
							|| (this._Doctors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctors.Entity = null;
						previousValue.Patient_Admissions.Remove(this);
					}
					this._Doctors.Entity = value;
					if ((value != null))
					{
						value.Patient_Admissions.Add(this);
						this._Doctor_id = value.Doctor_id;
					}
					else
					{
						this._Doctor_id = default(int);
					}
					this.SendPropertyChanged("Doctors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_Patient_Admissions", Storage="_Patients", ThisKey="Patient_id", OtherKey="Patient_id", IsForeignKey=true)]
		public Patients Patients
		{
			get
			{
				return this._Patients.Entity;
			}
			set
			{
				Patients previousValue = this._Patients.Entity;
				if (((previousValue != value) 
							|| (this._Patients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patients.Entity = null;
						previousValue.Patient_Admissions.Remove(this);
					}
					this._Patients.Entity = value;
					if ((value != null))
					{
						value.Patient_Admissions.Add(this);
						this._Patient_id = value.Patient_id;
					}
					else
					{
						this._Patient_id = default(int);
					}
					this.SendPropertyChanged("Patients");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Patient_id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Ssn;
		
		private string _Father_name;
		
		private string _Birth_place;
		
		private System.DateTime _Birth_date;
		
		private string _Sex;
		
		private string _Phone;
		
		private string _Address;
		
		private EntitySet<Patient_Admissions> _Patient_Admissions;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatient_idChanging(int value);
    partial void OnPatient_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnSsnChanging(string value);
    partial void OnSsnChanged();
    partial void OnFather_nameChanging(string value);
    partial void OnFather_nameChanged();
    partial void OnBirth_placeChanging(string value);
    partial void OnBirth_placeChanged();
    partial void OnBirth_dateChanging(System.DateTime value);
    partial void OnBirth_dateChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Patients()
		{
			this._Patient_Admissions = new EntitySet<Patient_Admissions>(new Action<Patient_Admissions>(this.attach_Patient_Admissions), new Action<Patient_Admissions>(this.detach_Patient_Admissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Patient_id
		{
			get
			{
				return this._Patient_id;
			}
			set
			{
				if ((this._Patient_id != value))
				{
					this.OnPatient_idChanging(value);
					this.SendPropertyChanging();
					this._Patient_id = value;
					this.SendPropertyChanged("Patient_id");
					this.OnPatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ssn", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Ssn
		{
			get
			{
				return this._Ssn;
			}
			set
			{
				if ((this._Ssn != value))
				{
					this.OnSsnChanging(value);
					this.SendPropertyChanging();
					this._Ssn = value;
					this.SendPropertyChanged("Ssn");
					this.OnSsnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Father_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Father_name
		{
			get
			{
				return this._Father_name;
			}
			set
			{
				if ((this._Father_name != value))
				{
					this.OnFather_nameChanging(value);
					this.SendPropertyChanging();
					this._Father_name = value;
					this.SendPropertyChanged("Father_name");
					this.OnFather_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birth_place", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Birth_place
		{
			get
			{
				return this._Birth_place;
			}
			set
			{
				if ((this._Birth_place != value))
				{
					this.OnBirth_placeChanging(value);
					this.SendPropertyChanging();
					this._Birth_place = value;
					this.SendPropertyChanged("Birth_place");
					this.OnBirth_placeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birth_date", DbType="Date NOT NULL")]
		public System.DateTime Birth_date
		{
			get
			{
				return this._Birth_date;
			}
			set
			{
				if ((this._Birth_date != value))
				{
					this.OnBirth_dateChanging(value);
					this.SendPropertyChanging();
					this._Birth_date = value;
					this.SendPropertyChanged("Birth_date");
					this.OnBirth_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_Patient_Admissions", Storage="_Patient_Admissions", ThisKey="Patient_id", OtherKey="Patient_id")]
		public EntitySet<Patient_Admissions> Patient_Admissions
		{
			get
			{
				return this._Patient_Admissions;
			}
			set
			{
				this._Patient_Admissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patient_Admissions(Patient_Admissions entity)
		{
			this.SendPropertyChanging();
			entity.Patients = this;
		}
		
		private void detach_Patient_Admissions(Patient_Admissions entity)
		{
			this.SendPropertyChanging();
			entity.Patients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staffs")]
	public partial class Staffs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Staff_id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Address;
		
		private string _Phone;
		
		private int _User_id;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_idChanging(int value);
    partial void OnStaff_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    #endregion
		
		public Staffs()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Staff_id
		{
			get
			{
				return this._Staff_id;
			}
			set
			{
				if ((this._Staff_id != value))
				{
					this.OnStaff_idChanging(value);
					this.SendPropertyChanging();
					this._Staff_id = value;
					this.SendPropertyChanged("Staff_id");
					this.OnStaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL")]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Staffs", Storage="_Users", ThisKey="User_id", OtherKey="User_id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._User_id = value.User_id;
					}
					else
					{
						this._User_id = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_id;
		
		private string _User_name;
		
		private string _Password;
		
		private string _Job;
		
		private string _E_mail;
		
		private EntitySet<Doctors> _Doctors;
		
		private EntitySet<Staffs> _Staffs;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnUser_nameChanging(string value);
    partial void OnUser_nameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    #endregion
		
		public Users()
		{
			this._Doctors = new EntitySet<Doctors>(new Action<Doctors>(this.attach_Doctors), new Action<Doctors>(this.detach_Doctors));
			this._Staffs = new EntitySet<Staffs>(new Action<Staffs>(this.attach_Staffs), new Action<Staffs>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_name
		{
			get
			{
				return this._User_name;
			}
			set
			{
				if ((this._User_name != value))
				{
					this.OnUser_nameChanging(value);
					this.SendPropertyChanging();
					this._User_name = value;
					this.SendPropertyChanged("User_name");
					this.OnUser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_mail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Doctors", Storage="_Doctors", ThisKey="User_id", OtherKey="User_id")]
		public EntitySet<Doctors> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Staffs", Storage="_Staffs", ThisKey="User_id", OtherKey="User_id")]
		public EntitySet<Staffs> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctors entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Doctors(Doctors entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Staffs(Staffs entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Staffs(Staffs entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
